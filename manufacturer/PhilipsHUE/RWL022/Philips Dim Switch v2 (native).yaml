blueprint:
  name: Philips Dim Switch v2 (native)
  description: "Control any light(s) with the Philips Dim Switch v2.\nThis blueprint is meant to behave as the switch works originally in the Philips HUE App."
  domain: automation
  input:
    remote:
      name: Philips Dim Switch v2
      selector:
        device:
          integration: zha
          model: RWL022
          multiple: false

    on_button_tap:
      name: On Button Tap
      description: What to do when the on button is tapped (short press)
      selector:
        target:
          entity:
            domain: light

    ## Hold?

    dim_scale:
      name: Diming Multiplier
      description: How much the light(s) should dim when you press the + or - button.
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.01
          mode: slider

    scene_cycle:
      name: HUE Button
      description: Pick the scenes you want this switch to cycle through, in the order you want.
      selector:
        entity:
          domain: scene
          multiple: true

    counter_entity:
      name: Scene Counter
      description: A counter used to track which scene to activate next (You need to create this on your own).
      selector:
        entity:
          domain: counter

    on_button_hold:
      name: (OPTIONAL) On Button Hold
      description: What to do when the on button is held (long press)
      default: []
      selector:
        action: {}

mode: queued
max_exceeded: silent
variables:
  on_button_tap: !input on_button_tap
  on_button_hold: !input on_button_hold

trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input remote

action:
- variables:
    command: '{{ trigger.event.data.command }}' ## off_with_effect, step, step, recall
    up_or_down: '{{ trigger.event.data.params.step_mode }}'
    step_size: '{{ trigger.event.data.params.step_size }}'
    scenes: !input scene_cycle

- choose:
  - conditions:
    - '{{ command == "off_with_effect" }}'
    sequence:
    - service: light.toggle
      target: !input on_button_tap

  - conditions:
    - '{{ command == "on_long_release" }}'
    sequence: !input on_button_hold

  - conditions:
    - '{{ command == "step" }}'
    - '{{ up_or_down == "0" }}' 
    sequence:
    - service: light.turn_on
      target: !input on_button_tap
      data:
        brightness_step_pct: "{{ step_size * dim_scale }}"
        transition: 1
    

  - conditions:
    - '{{ command == "step" }}'
    - '{{ up_or_down == "1" }}' 
    sequence:
    - service: light.turn_on
      target: !input on_button_tap
      data:
        brightness_step_pct: "{{ -step_size * dim_scale }}"
        transition: 1

  - conditions:
    - '{{ command == "recall" }}'
    sequence:
    - service: counter.increment
      target:
        entity_id: !input counter_entity
    - variables:
        counter_entity: !input counter_entity
    - variables:
        counter_value: "{{ states[counter_entity].state | int }}"
        index: "{{ counter_value % scenes | length }}"
        scene_to_activate: "{{ scenes[index] }}"

    - service: scene.turn_on
      data: 
        entity_id: '{{ scene_to_activate }}'
